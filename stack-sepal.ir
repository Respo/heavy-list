{:definitions {"stack-workflow.core/-main" ["defn" "-main" [] ["enable-console-print!"] ["render-app!"] ["add-watch" "store-ref" ":changes" "render-app!"] ["add-watch" "states-ref" ":changes" "render-app!"] ["println" "|app started!"]], "stack-workflow.comp.container/tbody" ["defn" "tbody" ["props" "&" "children"] ["create-element" ":tbody" "props" "children"]], "stack-workflow.core/render-app!" ["defn" "render-app!" [] ["let" [["target" [".querySelector" "js/document" "|#app"]]] ["render!" ["comp-container" "@store-ref"] "target" "dispatch!" "states-ref"]]], "stack-workflow.updater/nouns" ["def" "nouns" ["string/split" "|table,chair,house,bbq,desk,car,pony,cookie,sandwich,burger,pizza,mouse,keyboard" "|,"]], "stack-workflow.comp.container/comp-container" ["def" "comp-container" ["create-comp" ":container" "render"]], "stack-workflow.core/on-jsload" ["defn" "on-jsload" [] ["clear-cache!"] ["render-app!"] ["println" "|code update."]], "stack-workflow.comp.row/render" ["defn" "render" ["data" "style-class"] ["fn" ["state" "mutate!"] ["tr" ["{}" [":attrs" ["{}" [":class-name" "style-class"]]]] ["td" ["{}" [":attrs" ["{}" [":class-name" "|col-md-1"] [":inner-text" ["str" [":id" "data"]]]]]]] ["td" ["{}" [":attrs" ["{}" [":class-name" "|col-md-4"]]]] ["a" ["{}" [":attrs" ["{}" [":inner-text" [":label" "data"]]]] [":event" ["{}" [":click" ["on-click" [":id" "data"]]]]]]]] ["td" ["{}" [":attrs" ["{}" [":class-name" "|col-md-1"]]]] ["a" ["{}" [":event" ["{}" [":click" ["on-delete" [":id" "data"]]]]]] ["span" ["{}" [":attrs" ["{}" [":class-name" "|glyphicon glyphicon-remove"] [":aria-hidden" "|true"]]]]]]] ["td" ["{}" [":attrs" ["{}" [":class-name" "|col-md-6"]]]]]]]], "stack-workflow.comp.container/render" ["defn" "render" ["store"] ["fn" ["state" "mutate!"] ["div" ["{}" [":attrs" ["{}" [":class-name" "|container"]]]] ["comp-header"] ["--" "comp-debug" "store"] ["table" ["{}" [":attrs" ["{}" [":class-name" "|table table-hover table-striped test-data"]]]] ["tbody" ["{}"] ["->>" [":data" "store"] ["map" ["fn" ["row-data"] ["[]" [":id" "row-data"] ["comp-row" "row-data" ["if" ["=" [":id" "row-data"] [":selected" "store"]] "|danger" "|"]]]]]]]] ["span" ["{}" [":attrs" ["{}" [":class-name" "|preloadicon glyphicon glyphicon-remove"] [":aria-hidden" "|true"]]]]]]]], "stack-workflow.updater/updater" ["defn" "updater" ["store" "op" "op-data"] ["case" "op" [":run" ["->" "store" ["assoc" ":selected" "nil"] ["assoc" ":data" ["build-data" "1000"]]]] [":add" ["->" "store" ["update" ":data" ["fn" ["old-data"] ["into" ["[]"] ["concat" "old-data" ["build-data" "1000"]]]]]]] [":update" ["->" "store" ["update" ":data" ["fn" ["old-data"] ["map-indexed" ["fn" ["idx" "row"] ["if" ["zero?" ["mod" "idx" "10"]] ["update" "row" ":label" ["fn" ["text"] ["str" "text" "| !!!"]]] "row"]] "old-data"]]]]] [":select" ["assoc" "store" ":selected" "op-data"]] [":run-lots" ["->" "store" ["assoc" ":selected" "nil"] ["assoc" ":data" ["build-data" "10000"]]]] [":clear" ["->" "store" ["assoc" ":selected" "nil"] ["assoc" ":data" ["[]"]]]] [":delete" ["->" "store" ["update" ":data" ["fn" ["old-data"] ["filter" ["fn" ["row"] ["not=" [":id" "row"] "op-data"]] "old-data"]]]]] [":swap-rows" ["->" "store" ["update" ":data" ["fn" ["old-data"] ["if" [">" ["count" "old-data"] "10"] ["->" "old-data" ["assoc" "4" ["get" "old-data" "9"]] ["assoc" "9" ["get" "old-data" "4"]]] "old-data"]]]]] "store"]], "stack-workflow.comp.row/comp-row" ["def" "comp-row" ["create-comp" ":row" "render"]], "stack-workflow.core/dispatch!" ["defn" "dispatch!" ["op" "op-data"] ["println" "|op" "op" "op-data"] ["let" [["new-store" ["updater" "@store-ref" "op" "op-data"]]] ["reset!" "store-ref" "new-store"]]], "stack-workflow.core/states-ref" ["defonce" "states-ref" ["atom" ["{}"]]], "stack-workflow.comp.row/td" ["defn" "td" ["props" "&" "children"] ["create-element" ":td" "props" "children"]], "stack-workflow.comp.header/on-swap-rows" ["defn" "on-swap-rows" ["e" "dispatch!"] ["dispatch!" ":swap-rows" "nil"]], "stack-workflow.updater/id-ref" ["def" "id-ref" ["atom" "0"]], "stack-workflow.comp.header/div-class" ["defn" "div-class" ["class-name" "&" "children"] ["create-element" ":div" ["{}" [":attrs" ["{}" [":class-name" "class-name"]]]] "children"]], "stack-workflow.comp.container/table" ["defn" "table" ["props" "&" "children"] ["create-element" ":table" "props" "children"]], "stack-workflow.comp.row/on-click" ["defn" "on-click" ["id"] ["fn" ["e" "dispatch!"] ["dispatch!" ":select" "id"]]], "stack-workflow.comp.header/render-button" ["defn" "render-button" ["id-name" "text" "on-click"] ["div-class" "|col-sm-6 smallpad" ["button" ["{}" [":attrs" ["{}" [":type" "|button"] [":class-name" "|btn btn-primary btn-block"] [":id" "id-name"] [":inner-text" "text"]]] [":event" ["{}" [":click" "on-click"]]]]]]], "stack-workflow.comp.row/on-delete" ["defn" "on-delete" ["id"] ["fn" ["e" "dispatch!"] ["dispatch!" ":delete" "id"]]], "stack-workflow.updater/colours" ["def" "colours" ["string/split" "|red,yellow,blue,green,pink,brown,purple,brown,white,black,orange" "|,"]], "stack-workflow.core/initial-store" ["def" "initial-store" ["{}" [":selected" "nil"] [":data" ["[]"]] [":id" "nil"]]], "stack-workflow.comp.header/render" ["defn" "render" [] ["fn" ["state" "mutate!"] ["div-class" "|jumbotron" ["div-class" "|row" ["div-class" "|col-md-6" ["h1" ["{}"] ["comp-text" "|Respo v0.2.23" "nil"]]] ["div-class" "|col-md-6" ["div-class" "|row" ["render-button" "|run" "|Create 1,000 rows" "on-run"] ["render-button" "|runlots" "|Create 10,000 rows" "on-run-lots"] ["render-button" "|add" "|Append 1,000 rows" "on-add"] ["render-button" "|update" "|Update every 10th row" "on-update"] ["render-button" "|clear" "|Clear" "on-clear"] ["render-button" "|swaprows" "|Swap Rows" "on-swap-rows"]]]]]]], "stack-workflow.comp.row/tr" ["defn" "tr" ["props" "&" "children"] ["create-element" ":tr" "props" "children"]], "stack-workflow.comp.header/on-run" ["defn" "on-run" ["e" "dispatch!"] ["dispatch!" ":run" "nil"]], "stack-workflow.core/store-ref" ["defonce" "store-ref" ["atom" "initial-store"]], "stack-workflow.comp.header/comp-header" ["def" "comp-header" ["create-comp" ":header" "render"]], "stack-workflow.updater/-random" ["defn" "-random" ["max"] [".round" "js/Math" ["mod" ["*" "1000" [".random" "js/Math"]] "max"]]], "stack-workflow.comp.header/on-add" ["defn" "on-add" ["e" "dispatch!"] ["dispatch!" ":add" "nil"]], "stack-workflow.updater/build-data" ["defn" "build-data" ["length"] ["into" ["[]"] ["->>" ["repeat" "length" "0"] ["map" ["fn" ["zero"] ["{}" [":id" ["get-id"]] [":label" ["str" ["get" "adjectives" ["-random" ["count" "adjectives"]]] "| " ["get" "colours" ["-random" ["count" "colours"]]] "| " ["get" "nouns" ["-random" ["count" "nouns"]]]]]]]]]]], "stack-workflow.comp.header/on-update" ["defn" "on-update" ["e" "dispatch!"] ["dispatch!" ":update" "nil"]], "stack-workflow.updater/adjectives" ["def" "adjectives" ["string/split" "|pretty,large,big,small,tall,short,long,handsome,plain,quaint,clean,elegant,easy,angry,crazy,helpful,mushy,odd,unsightly,adorable,important,inexpensive,cheap,expensive,fancy" "|,"]], "stack-workflow.updater/get-id" ["defn" "get-id" [] ["swap!" "id-ref" "inc"] "@id-ref"], "stack-workflow.comp.header/on-run-lots" ["defn" "on-run-lots" ["e" "dispatch!"] ["dispatch!" ":run-lots" "nil"]], "stack-workflow.comp.header/on-clear" ["defn" "on-clear" ["e" "dispatch!"] ["dispatch!" ":clear" "nil"]]}, :namespaces {"stack-workflow.comp.container" ["ns" "stack-workflow.comp.container" [":require" ["[]" "hsl.core" ":refer" ["[]" "hsl"]] ["[]" "respo-ui.style" ":as" "ui"] ["[]" "respo.alias" ":refer" ["[]" "create-comp" "create-element" "div" "span"]] ["[]" "respo.comp.space" ":refer" ["[]" "comp-space"]] ["[]" "respo.comp.text" ":refer" ["[]" "comp-text"]] ["[]" "respo.comp.debug" ":refer" ["[]" "comp-debug"]] ["[]" "stack-workflow.comp.header" ":refer" ["[]" "comp-header"]] ["[]" "stack-workflow.comp.row" ":refer" ["[]" "comp-row"]]]], "stack-workflow.core" ["ns" "stack-workflow.core" [":require" ["[]" "respo.core" ":refer" ["[]" "render!" "clear-cache!"]] ["[]" "stack-workflow.comp.container" ":refer" ["[]" "comp-container"]] ["[]" "cljs.reader" ":refer" ["[]" "read-string"]] ["[]" "stack-workflow.updater" ":refer" ["[]" "updater"]]]], "stack-workflow.comp.header" ["ns" "stack-workflow.comp.header" [":require" ["[]" "respo.alias" ":refer" ["[]" "create-comp" "create-element" "div" "button" "h1"]] ["[]" "respo.comp.text" ":refer" ["[]" "comp-text"]]]], "stack-workflow.comp.row" ["ns" "stack-workflow.comp.row" [":require" ["[]" "respo.alias" ":refer" ["[]" "create-comp" "create-element" "a" "span"]]]], "stack-workflow.updater" ["ns" "stack-workflow.updater" [":require" ["[]" "clojure.string" ":as" "string"]]]}, :procedures {"stack-workflow.core" [["set!" [".-onload" "js/window"] "-main"]], "stack-workflow.comp.header" [], "stack-workflow.comp.row" [], "stack-workflow.updater" []}}